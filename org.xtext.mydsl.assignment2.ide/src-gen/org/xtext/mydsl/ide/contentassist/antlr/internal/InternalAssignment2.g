/*
 * generated by Xtext 2.21.0
 */
grammar InternalAssignment2;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.mydsl.services.Assignment2GrammarAccess;

}
@parser::members {
	private Assignment2GrammarAccess grammarAccess;

	public void setGrammarAccess(Assignment2GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getMathAssignment()); }
		(rule__Model__MathAssignment)*
		{ after(grammarAccess.getModelAccess().getMathAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMathExp
entryRuleMathExp
:
{ before(grammarAccess.getMathExpRule()); }
	 ruleMathExp
{ after(grammarAccess.getMathExpRule()); } 
	 EOF 
;

// Rule MathExp
ruleMathExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMathExpAccess().getGroup()); }
		(rule__MathExp__Group__0)
		{ after(grammarAccess.getMathExpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpMultDiv
entryRuleExpMultDiv
:
{ before(grammarAccess.getExpMultDivRule()); }
	 ruleExpMultDiv
{ after(grammarAccess.getExpMultDivRule()); } 
	 EOF 
;

// Rule ExpMultDiv
ruleExpMultDiv 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpMultDivAccess().getGroup()); }
		(rule__ExpMultDiv__Group__0)
		{ after(grammarAccess.getExpMultDivAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpMinusPlus
entryRuleExpMinusPlus
:
{ before(grammarAccess.getExpMinusPlusRule()); }
	 ruleExpMinusPlus
{ after(grammarAccess.getExpMinusPlusRule()); } 
	 EOF 
;

// Rule ExpMinusPlus
ruleExpMinusPlus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpMinusPlusAccess().getGroup()); }
		(rule__ExpMinusPlus__Group__0)
		{ after(grammarAccess.getExpMinusPlusAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpPM
entryRuleExpPM
:
{ before(grammarAccess.getExpPMRule()); }
	 ruleExpPM
{ after(grammarAccess.getExpPMRule()); } 
	 EOF 
;

// Rule ExpPM
ruleExpPM 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpPMAccess().getAlternatives()); }
		(rule__ExpPM__Alternatives)
		{ after(grammarAccess.getExpPMAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpMD
entryRuleExpMD
:
{ before(grammarAccess.getExpMDRule()); }
	 ruleExpMD
{ after(grammarAccess.getExpMDRule()); } 
	 EOF 
;

// Rule ExpMD
ruleExpMD 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpMDAccess().getAlternatives()); }
		(rule__ExpMD__Alternatives)
		{ after(grammarAccess.getExpMDAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParenthesis
entryRuleParenthesis
:
{ before(grammarAccess.getParenthesisRule()); }
	 ruleParenthesis
{ after(grammarAccess.getParenthesisRule()); } 
	 EOF 
;

// Rule Parenthesis
ruleParenthesis 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParenthesisAccess().getGroup()); }
		(rule__Parenthesis__Group__0)
		{ after(grammarAccess.getParenthesisAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumber
entryRuleNumber
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberAccess().getValueAssignment()); }
		(rule__Number__ValueAssignment)
		{ after(grammarAccess.getNumberAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpPM__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpPMAccess().getGroup_0()); }
		(rule__ExpPM__Group_0__0)
		{ after(grammarAccess.getExpPMAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpPMAccess().getGroup_1()); }
		(rule__ExpPM__Group_1__0)
		{ after(grammarAccess.getExpPMAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMD__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpMDAccess().getGroup_0()); }
		(rule__ExpMD__Group_0__0)
		{ after(grammarAccess.getExpMDAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpMDAccess().getGroup_1()); }
		(rule__ExpMD__Group_1__0)
		{ after(grammarAccess.getExpMDAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getNumberParserRuleCall_0()); }
		ruleNumber
		{ after(grammarAccess.getPrimaryAccess().getNumberParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getParenthesisParserRuleCall_1()); }
		ruleParenthesis
		{ after(grammarAccess.getPrimaryAccess().getParenthesisParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MathExp__Group__0__Impl
	rule__MathExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMathExpAccess().getResultKeyword_0()); }
	'result'
	{ after(grammarAccess.getMathExpAccess().getResultKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MathExp__Group__1__Impl
	rule__MathExp__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMathExpAccess().getIsKeyword_1()); }
	'is'
	{ after(grammarAccess.getMathExpAccess().getIsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExp__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MathExp__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExp__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMathExpAccess().getExpAssignment_2()); }
	(rule__MathExp__ExpAssignment_2)
	{ after(grammarAccess.getMathExpAccess().getExpAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpMultDiv__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpMultDiv__Group__0__Impl
	rule__ExpMultDiv__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMultDiv__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpMultDivAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
	{ after(grammarAccess.getExpMultDivAccess().getPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMultDiv__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpMultDiv__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMultDiv__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpMultDivAccess().getGroup_1()); }
	(rule__ExpMultDiv__Group_1__0)*
	{ after(grammarAccess.getExpMultDivAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpMultDiv__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpMultDiv__Group_1__0__Impl
	rule__ExpMultDiv__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMultDiv__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpMultDivAccess().getExpLeftAction_1_0()); }
	()
	{ after(grammarAccess.getExpMultDivAccess().getExpLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMultDiv__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpMultDiv__Group_1__1__Impl
	rule__ExpMultDiv__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMultDiv__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpMultDivAccess().getOperatorAssignment_1_1()); }
	(rule__ExpMultDiv__OperatorAssignment_1_1)
	{ after(grammarAccess.getExpMultDivAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMultDiv__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpMultDiv__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMultDiv__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpMultDivAccess().getRightAssignment_1_2()); }
	(rule__ExpMultDiv__RightAssignment_1_2)
	{ after(grammarAccess.getExpMultDivAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpMinusPlus__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpMinusPlus__Group__0__Impl
	rule__ExpMinusPlus__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMinusPlus__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpMinusPlusAccess().getExpMultDivParserRuleCall_0()); }
	ruleExpMultDiv
	{ after(grammarAccess.getExpMinusPlusAccess().getExpMultDivParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMinusPlus__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpMinusPlus__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMinusPlus__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpMinusPlusAccess().getGroup_1()); }
	(rule__ExpMinusPlus__Group_1__0)*
	{ after(grammarAccess.getExpMinusPlusAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpMinusPlus__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpMinusPlus__Group_1__0__Impl
	rule__ExpMinusPlus__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMinusPlus__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpMinusPlusAccess().getExpMinusPlusLeftAction_1_0()); }
	()
	{ after(grammarAccess.getExpMinusPlusAccess().getExpMinusPlusLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMinusPlus__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpMinusPlus__Group_1__1__Impl
	rule__ExpMinusPlus__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMinusPlus__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpMinusPlusAccess().getOperatorAssignment_1_1()); }
	(rule__ExpMinusPlus__OperatorAssignment_1_1)
	{ after(grammarAccess.getExpMinusPlusAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMinusPlus__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpMinusPlus__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMinusPlus__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpMinusPlusAccess().getRightAssignment_1_2()); }
	(rule__ExpMinusPlus__RightAssignment_1_2)
	{ after(grammarAccess.getExpMinusPlusAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpPM__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpPM__Group_0__0__Impl
	rule__ExpPM__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpPM__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpPMAccess().getPlusAction_0_0()); }
	()
	{ after(grammarAccess.getExpPMAccess().getPlusAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpPM__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpPM__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpPM__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpPMAccess().getPlusSignKeyword_0_1()); }
	'+'
	{ after(grammarAccess.getExpPMAccess().getPlusSignKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpPM__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpPM__Group_1__0__Impl
	rule__ExpPM__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpPM__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpPMAccess().getMinusAction_1_0()); }
	()
	{ after(grammarAccess.getExpPMAccess().getMinusAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpPM__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpPM__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpPM__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpPMAccess().getHyphenMinusKeyword_1_1()); }
	'-'
	{ after(grammarAccess.getExpPMAccess().getHyphenMinusKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpMD__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpMD__Group_0__0__Impl
	rule__ExpMD__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMD__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpMDAccess().getMultAction_0_0()); }
	()
	{ after(grammarAccess.getExpMDAccess().getMultAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMD__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpMD__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMD__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpMDAccess().getAsteriskKeyword_0_1()); }
	'*'
	{ after(grammarAccess.getExpMDAccess().getAsteriskKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpMD__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpMD__Group_1__0__Impl
	rule__ExpMD__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMD__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpMDAccess().getDivAction_1_0()); }
	()
	{ after(grammarAccess.getExpMDAccess().getDivAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMD__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpMD__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMD__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpMDAccess().getSolidusKeyword_1_1()); }
	'/'
	{ after(grammarAccess.getExpMDAccess().getSolidusKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parenthesis__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parenthesis__Group__0__Impl
	rule__Parenthesis__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parenthesis__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesisAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getParenthesisAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parenthesis__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parenthesis__Group__1__Impl
	rule__Parenthesis__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parenthesis__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesisAccess().getExpAssignment_1()); }
	(rule__Parenthesis__ExpAssignment_1)
	{ after(grammarAccess.getParenthesisAccess().getExpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parenthesis__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parenthesis__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parenthesis__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesisAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getParenthesisAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__MathAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getMathMathExpParserRuleCall_0()); }
		ruleMathExp
		{ after(grammarAccess.getModelAccess().getMathMathExpParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExp__ExpAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMathExpAccess().getExpExpMinusPlusParserRuleCall_2_0()); }
		ruleExpMinusPlus
		{ after(grammarAccess.getMathExpAccess().getExpExpMinusPlusParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMultDiv__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpMultDivAccess().getOperatorExpMDParserRuleCall_1_1_0()); }
		ruleExpMD
		{ after(grammarAccess.getExpMultDivAccess().getOperatorExpMDParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMultDiv__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpMultDivAccess().getRightPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getExpMultDivAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMinusPlus__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpMinusPlusAccess().getOperatorExpPMParserRuleCall_1_1_0()); }
		ruleExpPM
		{ after(grammarAccess.getExpMinusPlusAccess().getOperatorExpPMParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpMinusPlus__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpMinusPlusAccess().getRightExpMultDivParserRuleCall_1_2_0()); }
		ruleExpMultDiv
		{ after(grammarAccess.getExpMinusPlusAccess().getRightExpMultDivParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parenthesis__ExpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParenthesisAccess().getExpExpMinusPlusParserRuleCall_1_0()); }
		ruleExpMinusPlus
		{ after(grammarAccess.getParenthesisAccess().getExpExpMinusPlusParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
