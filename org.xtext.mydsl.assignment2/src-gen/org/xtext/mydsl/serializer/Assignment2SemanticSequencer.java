/*
 * generated by Xtext 2.21.0
 */
package org.xtext.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.mydsl.assignment2.Assignment2Package;
import org.xtext.mydsl.assignment2.Div;
import org.xtext.mydsl.assignment2.Exp;
import org.xtext.mydsl.assignment2.ExpMinusPlus;
import org.xtext.mydsl.assignment2.MathExp;
import org.xtext.mydsl.assignment2.Minus;
import org.xtext.mydsl.assignment2.Model;
import org.xtext.mydsl.assignment2.Mult;
import org.xtext.mydsl.assignment2.Parenthesis;
import org.xtext.mydsl.assignment2.Plus;
import org.xtext.mydsl.services.Assignment2GrammarAccess;

@SuppressWarnings("all")
public class Assignment2SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private Assignment2GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Assignment2Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Assignment2Package.DIV:
				sequence_ExpMD(context, (Div) semanticObject); 
				return; 
			case Assignment2Package.EXP:
				sequence_ExpMultDiv(context, (Exp) semanticObject); 
				return; 
			case Assignment2Package.EXP_MINUS_PLUS:
				sequence_ExpMinusPlus(context, (ExpMinusPlus) semanticObject); 
				return; 
			case Assignment2Package.MATH_EXP:
				sequence_MathExp(context, (MathExp) semanticObject); 
				return; 
			case Assignment2Package.MINUS:
				sequence_ExpPM(context, (Minus) semanticObject); 
				return; 
			case Assignment2Package.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case Assignment2Package.MULT:
				sequence_ExpMD(context, (Mult) semanticObject); 
				return; 
			case Assignment2Package.NUMBER:
				sequence_Number(context, (org.xtext.mydsl.assignment2.Number) semanticObject); 
				return; 
			case Assignment2Package.PARENTHESIS:
				sequence_Parenthesis(context, (Parenthesis) semanticObject); 
				return; 
			case Assignment2Package.PLUS:
				sequence_ExpPM(context, (Plus) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ExpMD returns Div
	 *
	 * Constraint:
	 *     {Div}
	 */
	protected void sequence_ExpMD(ISerializationContext context, Div semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpMD returns Mult
	 *
	 * Constraint:
	 *     {Mult}
	 */
	protected void sequence_ExpMD(ISerializationContext context, Mult semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpMinusPlus returns ExpMinusPlus
	 *     ExpMinusPlus.ExpMinusPlus_1_0 returns ExpMinusPlus
	 *
	 * Constraint:
	 *     (left=ExpMinusPlus_ExpMinusPlus_1_0 operator=ExpPM right=ExpMultDiv)
	 */
	protected void sequence_ExpMinusPlus(ISerializationContext context, ExpMinusPlus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Assignment2Package.Literals.EXP_MINUS_PLUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Assignment2Package.Literals.EXP_MINUS_PLUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, Assignment2Package.Literals.EXP_MINUS_PLUS__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Assignment2Package.Literals.EXP_MINUS_PLUS__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, Assignment2Package.Literals.EXP_MINUS_PLUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Assignment2Package.Literals.EXP_MINUS_PLUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpMinusPlusAccess().getExpMinusPlusLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpMinusPlusAccess().getOperatorExpPMParserRuleCall_1_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getExpMinusPlusAccess().getRightExpMultDivParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExpMultDiv returns Exp
	 *     ExpMultDiv.Exp_1_0 returns Exp
	 *     ExpMinusPlus returns Exp
	 *     ExpMinusPlus.ExpMinusPlus_1_0 returns Exp
	 *
	 * Constraint:
	 *     (left=ExpMultDiv_Exp_1_0 operator=ExpMD right=Primary)
	 */
	protected void sequence_ExpMultDiv(ISerializationContext context, Exp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Assignment2Package.Literals.EXP_MINUS_PLUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Assignment2Package.Literals.EXP_MINUS_PLUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, Assignment2Package.Literals.EXP_MINUS_PLUS__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Assignment2Package.Literals.EXP_MINUS_PLUS__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, Assignment2Package.Literals.EXP_MINUS_PLUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Assignment2Package.Literals.EXP_MINUS_PLUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpMultDivAccess().getExpLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpMultDivAccess().getOperatorExpMDParserRuleCall_1_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getExpMultDivAccess().getRightPrimaryParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExpPM returns Minus
	 *
	 * Constraint:
	 *     {Minus}
	 */
	protected void sequence_ExpPM(ISerializationContext context, Minus semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpPM returns Plus
	 *
	 * Constraint:
	 *     {Plus}
	 */
	protected void sequence_ExpPM(ISerializationContext context, Plus semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MathExp returns MathExp
	 *
	 * Constraint:
	 *     exp=ExpMinusPlus
	 */
	protected void sequence_MathExp(ISerializationContext context, MathExp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Assignment2Package.Literals.MATH_EXP__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Assignment2Package.Literals.MATH_EXP__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMathExpAccess().getExpExpMinusPlusParserRuleCall_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     math+=MathExp+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpMultDiv returns Number
	 *     ExpMultDiv.Exp_1_0 returns Number
	 *     ExpMinusPlus returns Number
	 *     ExpMinusPlus.ExpMinusPlus_1_0 returns Number
	 *     Primary returns Number
	 *     Number returns Number
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Number(ISerializationContext context, org.xtext.mydsl.assignment2.Number semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Assignment2Package.Literals.NUMBER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Assignment2Package.Literals.NUMBER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExpMultDiv returns Parenthesis
	 *     ExpMultDiv.Exp_1_0 returns Parenthesis
	 *     ExpMinusPlus returns Parenthesis
	 *     ExpMinusPlus.ExpMinusPlus_1_0 returns Parenthesis
	 *     Primary returns Parenthesis
	 *     Parenthesis returns Parenthesis
	 *
	 * Constraint:
	 *     exp=ExpMinusPlus
	 */
	protected void sequence_Parenthesis(ISerializationContext context, Parenthesis semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Assignment2Package.Literals.PARENTHESIS__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Assignment2Package.Literals.PARENTHESIS__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParenthesisAccess().getExpExpMinusPlusParserRuleCall_1_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
}
