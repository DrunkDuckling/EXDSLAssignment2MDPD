/*
 * generated by Xtext 2.21.0
 */
package org.xtext.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class Assignment2GrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mydsl.Assignment2.Model");
		private final Assignment cMathAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMathMathExpParserRuleCall_0 = (RuleCall)cMathAssignment.eContents().get(0);
		
		//Model:
		//	math+=MathExp*;
		@Override public ParserRule getRule() { return rule; }
		
		//math+=MathExp*
		public Assignment getMathAssignment() { return cMathAssignment; }
		
		//MathExp
		public RuleCall getMathMathExpParserRuleCall_0() { return cMathMathExpParserRuleCall_0; }
	}
	public class MathExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mydsl.Assignment2.MathExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpMinusPlusParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//MathExp:
		//	'result' 'is' exp=ExpMinusPlus;
		@Override public ParserRule getRule() { return rule; }
		
		//'result' 'is' exp=ExpMinusPlus
		public Group getGroup() { return cGroup; }
		
		//'result'
		public Keyword getResultKeyword_0() { return cResultKeyword_0; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//exp=ExpMinusPlus
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//ExpMinusPlus
		public RuleCall getExpExpMinusPlusParserRuleCall_2_0() { return cExpExpMinusPlusParserRuleCall_2_0; }
	}
	public class ExpMultDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mydsl.Assignment2.ExpMultDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorExpMDParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExpMultDiv:
		//	Primary ({Exp.left=current} operator=ExpMD right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({Exp.left=current} operator=ExpMD right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({Exp.left=current} operator=ExpMD right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Exp.left=current}
		public Action getExpLeftAction_1_0() { return cExpLeftAction_1_0; }
		
		//operator=ExpMD
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ExpMD
		public RuleCall getOperatorExpMDParserRuleCall_1_1_0() { return cOperatorExpMDParserRuleCall_1_1_0; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class ExpMinusPlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mydsl.Assignment2.ExpMinusPlus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpMultDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpMinusPlusLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorExpPMParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpMultDivParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExpMinusPlus:
		//	ExpMultDiv ({ExpMinusPlus.left=current} operator=ExpPM right=ExpMultDiv)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpMultDiv ({ExpMinusPlus.left=current} operator=ExpPM right=ExpMultDiv)*
		public Group getGroup() { return cGroup; }
		
		//ExpMultDiv
		public RuleCall getExpMultDivParserRuleCall_0() { return cExpMultDivParserRuleCall_0; }
		
		//({ExpMinusPlus.left=current} operator=ExpPM right=ExpMultDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ExpMinusPlus.left=current}
		public Action getExpMinusPlusLeftAction_1_0() { return cExpMinusPlusLeftAction_1_0; }
		
		//operator=ExpPM
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ExpPM
		public RuleCall getOperatorExpPMParserRuleCall_1_1_0() { return cOperatorExpPMParserRuleCall_1_1_0; }
		
		//right=ExpMultDiv
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ExpMultDiv
		public RuleCall getRightExpMultDivParserRuleCall_1_2_0() { return cRightExpMultDivParserRuleCall_1_2_0; }
	}
	public class ExpPMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mydsl.Assignment2.ExpPM");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPlusAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cMinusAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ExpPM:
		//	{Plus} '+' | {Minus} '-';
		@Override public ParserRule getRule() { return rule; }
		
		//{Plus} '+' | {Minus} '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Plus} '+'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Plus}
		public Action getPlusAction_0_0() { return cPlusAction_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_1() { return cPlusSignKeyword_0_1; }
		
		//{Minus} '-'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Minus}
		public Action getMinusAction_1_0() { return cMinusAction_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
	}
	public class ExpMDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mydsl.Assignment2.ExpMD");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cMultAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDivAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ExpMD:
		//	{Mult} '*' | {Div} '/';
		@Override public ParserRule getRule() { return rule; }
		
		//{Mult} '*' | {Div} '/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Mult} '*'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Mult}
		public Action getMultAction_0_0() { return cMultAction_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_1() { return cAsteriskKeyword_0_1; }
		
		//{Div} '/'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Div}
		public Action getDivAction_1_0() { return cDivAction_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1() { return cSolidusKeyword_1_1; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mydsl.Assignment2.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParenthesisParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Primary:
		//	Number | Parenthesis;
		@Override public ParserRule getRule() { return rule; }
		
		//Number | Parenthesis
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Number
		public RuleCall getNumberParserRuleCall_0() { return cNumberParserRuleCall_0; }
		
		//Parenthesis
		public RuleCall getParenthesisParserRuleCall_1() { return cParenthesisParserRuleCall_1; }
	}
	public class ParenthesisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mydsl.Assignment2.Parenthesis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpMinusPlusParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parenthesis:
		//	'(' exp=ExpMinusPlus ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' exp=ExpMinusPlus ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//exp=ExpMinusPlus
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//ExpMinusPlus
		public RuleCall getExpExpMinusPlusParserRuleCall_1_0() { return cExpExpMinusPlusParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.mydsl.Assignment2.Number");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Number:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	
	
	private final ModelElements pModel;
	private final MathExpElements pMathExp;
	private final ExpMultDivElements pExpMultDiv;
	private final ExpMinusPlusElements pExpMinusPlus;
	private final ExpPMElements pExpPM;
	private final ExpMDElements pExpMD;
	private final PrimaryElements pPrimary;
	private final ParenthesisElements pParenthesis;
	private final NumberElements pNumber;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Assignment2GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pMathExp = new MathExpElements();
		this.pExpMultDiv = new ExpMultDivElements();
		this.pExpMinusPlus = new ExpMinusPlusElements();
		this.pExpPM = new ExpPMElements();
		this.pExpMD = new ExpMDElements();
		this.pPrimary = new PrimaryElements();
		this.pParenthesis = new ParenthesisElements();
		this.pNumber = new NumberElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.mydsl.Assignment2".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	math+=MathExp*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//MathExp:
	//	'result' 'is' exp=ExpMinusPlus;
	public MathExpElements getMathExpAccess() {
		return pMathExp;
	}
	
	public ParserRule getMathExpRule() {
		return getMathExpAccess().getRule();
	}
	
	//ExpMultDiv:
	//	Primary ({Exp.left=current} operator=ExpMD right=Primary)*;
	public ExpMultDivElements getExpMultDivAccess() {
		return pExpMultDiv;
	}
	
	public ParserRule getExpMultDivRule() {
		return getExpMultDivAccess().getRule();
	}
	
	//ExpMinusPlus:
	//	ExpMultDiv ({ExpMinusPlus.left=current} operator=ExpPM right=ExpMultDiv)*;
	public ExpMinusPlusElements getExpMinusPlusAccess() {
		return pExpMinusPlus;
	}
	
	public ParserRule getExpMinusPlusRule() {
		return getExpMinusPlusAccess().getRule();
	}
	
	//ExpPM:
	//	{Plus} '+' | {Minus} '-';
	public ExpPMElements getExpPMAccess() {
		return pExpPM;
	}
	
	public ParserRule getExpPMRule() {
		return getExpPMAccess().getRule();
	}
	
	//ExpMD:
	//	{Mult} '*' | {Div} '/';
	public ExpMDElements getExpMDAccess() {
		return pExpMD;
	}
	
	public ParserRule getExpMDRule() {
		return getExpMDAccess().getRule();
	}
	
	//Primary:
	//	Number | Parenthesis;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Parenthesis:
	//	'(' exp=ExpMinusPlus ')';
	public ParenthesisElements getParenthesisAccess() {
		return pParenthesis;
	}
	
	public ParserRule getParenthesisRule() {
		return getParenthesisAccess().getRule();
	}
	
	//Number:
	//	value=INT;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
